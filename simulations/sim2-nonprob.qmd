---
title: "Simulation 2 - non-probability sample"
format: 
  html:
    self-contained: true
    table-of-contents: true
    number-sections: true
    df-print: kable
editor: source
execute: 
  eval: true
  warning: false
  message: false
toc-title: Contents
lang: en
---



# Simulation results

```{r}
results_sample <- saveRDS(file = "results/sim-chen2020-jasa.rds")
```


Combine results

```{r}


results_sample[estimator == "Mean"] |> 
  ggplot(data = _, aes(x = type, y = value)) +
  geom_jitter(alpha = 0.05, shape = 1) + 
  geom_violin(alpha = 0.8, draw_quantiles = c(0.25, 0.5, 0.75), scale = "width") + 
  stat_summary(fun = mean, geom = "point") + 
  facet_wrap(~y)  + 
    geom_hline(data = pop_true_vals[estimator2 == "Mean", .(y, estimator=estimator2, true)], 
             aes(yintercept = true), linetype = "dashed", color = "red") + 
  labs(x = "Estimator", y = "Value") -> p2

p2
ggsave(plot = p2, filename = "../figs/sim-nonprob-estimated-mean.pdf", width = 8, height = 6)
ggsave(plot = p2, filename = "../figs/sim-nonprob-estimated-mean.png", width = 8, height = 6)

results_sample[estimator != "Mean"] |> 
  ggplot(data = _, aes(x = type, y = value)) +
  geom_jitter(alpha = 0.05, shape = 1) + 
  geom_violin(alpha = 0.8, draw_quantiles = c(0.25, 0.5, 0.75), scale = "width") + 
  stat_summary(fun = mean, geom = "point") + 
  facet_grid(y ~ estimator, scales = "free_y")  + 
    geom_hline(data = pop_true_vals[estimator2 != "Mean", .(y, estimator=estimator2, true)], 
             aes(yintercept = true), linetype = "dashed", color = "red") + 
  labs(x = "Estimator", y = "Value") -> p2

p2
ggsave(plot = p2, filename = "../figs/sim-nonprob-estimated-quantiles.pdf", width = 8, height = 6)
ggsave(plot = p2, filename = "../figs/sim-nonprob-estimated-quantiles.png", width = 8, height = 6)

```

```{r}
results_sample[, .(mean = mean(value), bias=mean(value)-mean(true), var = var(value)), .(y, estimator, type)][
  , ":="(mse = bias^2+var, rmse = sqrt(bias^2+var))][order(y, estimator)][
    , .(y, 
        characteristic=estimator,
        estimator=type, 
        bias, se=sqrt(var), rmse)] |> 
  melt(id.vars = c("y", "characteristic", "estimator")) |> 
  transform(y = paste(y, variable, sep = "_")) |> 
  transform(variable = NULL,
            value = value*100) |> 
  dcast(... ~ y, value.var = "value") |> 
  {\(x) x[, .(characteristic, estimator, y1_bias, y1_se, y1_rmse, y2_bias, y2_se, y2_rmse, y3_bias, y3_se, y3_rmse)]}() -> results_sim_estimated

results_sim_estimated[characteristic %in% c("Mean","Q50"), .(characteristic, estimator, y1_bias, y1_rmse)]
```

```{r}
results_sim_estimated |> 
  subset(select = -(characteristic)) |> 
  xtable(digits=1) |> 
  print.xtable(include.rownames = F)
```

```{r}

```


